{"version":3,"sources":["Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","country","active","carddetails","style","styles","infected","text","value","bottomText","className","container","Grid","spacing","justify","map","detail","index","item","component","Card","xs","md","cx","margin","padding","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","toLocaleTimeString","url","fetchData","a","changeableurl","axios","get","console","log","fetchDailyData","date","reportDate","total","fetchCountries","countries","name","Chart","lineChart","useState","dailyData","setDailyData","useEffect","fetchAPI","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","hoverBackgroundColor","options","legend","display","title","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc813487.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\",\"image\":\"Chart_image__3E_3w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__4LMvE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\",\"active\":\"Cards_active__3_M63\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nconst Cards = ({\n  data: { confirmed, recovered, deaths, lastUpdate },\n  country,\n}) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  const active = confirmed[\"value\"] - recovered[\"value\"] - deaths[\"value\"];\n  let carddetails = [\n    {\n      style: styles.infected,\n      text: \"Infected\",\n      value: confirmed.value,\n      bottomText: \"Number of infect cases of COVID-19\",\n    },\n    {\n      style: styles.recovered,\n      text: \"Recovered\",\n      value: recovered.value,\n      bottomText: \"Number of recoveries from COVID-19\",\n    },\n    {\n      style: styles.deaths,\n      text: \"Deaths\",\n      value: deaths.value,\n      bottomText: \"Number of deaths caused by COVID-19\",\n    },\n    {\n      style: styles.active,\n      text: \"Active\",\n      value: active,\n      bottomText: \"Number of active cases of COVID-19\",\n    },\n  ];\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        {carddetails.map((detail, index) => (\n          <Grid\n            item\n            component={Card}\n            xs={12}\n            md={2}\n            className={cx(styles.Card, detail.style)}\n            key={index}\n            style={{ margin: \"0px 23.675px\", padding: \"12px\" }}\n          >\n            <CardContent>\n              <Typography color=\"textPrimary\" gutterBottom>\n                <b>{detail.text}</b>\n              </Typography>\n              <Typography variant=\"h5\">\n                <CountUp\n                  start={0}\n                  end={detail.value}\n                  duration={2}\n                  separator=\",\"\n                />\n              </Typography>\n              <Typography color=\"textPrimary\">Last Updated at : </Typography>\n              <Typography color=\"textSecondary\" variant=\"body2\">\n                {new Date(lastUpdate).toDateString()}\n              </Typography>\n              <Typography color=\"textSecondary\" variant=\"body2\">\n                {new Date(lastUpdate).toLocaleTimeString()}\n              </Typography>\n              <Typography variant=\"body2\">{detail.bottomText}</Typography>\n              <Typography color=\"textPrimary\"> {country} </Typography>\n            </CardContent>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from 'axios';\nconst url = 'https://covid19.mathdro.id/api';\nexport const fetchData = async (country) => {\n  let changeableurl = url;\n  if(country){\n    changeableurl = `${url}/countries/${country}`\n  }\n  try{\n    const{ data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableurl);\n    return{ confirmed, recovered, deaths, lastUpdate}\n  }\n  catch(error){\n    console.log(error);\n  }\n};\nexport const fetchDailyData = async () => {\n  try{\n    const {data} = await axios.get(`${url}/daily`);\n    return data.map(({confirmed, deaths, reportDate: date}) => (\n      {\n        confirmed: confirmed.total,\n        deaths: deaths.total,\n        date\n      }));\n  }\n  catch(error){\n    return error;\n  }\n};\nexport const fetchCountries = async () => {\n  try{\n    const {data: {countries}} = await axios.get(`${url}/countries`);\n   return countries.map((country) => country.name);\n  }\n  catch(error){\n    return error\n  }\n};","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  let lineChart;\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n  if(dailyData){\n  lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255,0,0,0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n    }\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\", \"Active\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n              \"rgba(242, 234, 0, 0.5)\",\n            ],\n            hoverBackgroundColor: [\n              \"rgba(0, 77, 153)\",\n              \"rgba(30, 102, 49)\",\n              \"rgba(255, 51, 51)\",\n              \"rgba(204, 153, 0)\",\n            ],\n            data: [\n              confirmed.value,\n              recovered.value,\n              deaths.value,\n              confirmed.value - (recovered.value + deaths.value),\n            ],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport styles from \"./CountryPicker.module.css\";\nimport { fetchCountries } from \"../../api\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries());\n    };\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => handleCountryChange(e.target.value)}\n      >\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, key) => (\n          <option key={key} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./Components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport coronaImage from \"./images/image.png\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19 Campaign\" />\n        <br />\n        <text>\n          <b>Live Covid19 Tracker - Covid19 Campaign</b>\n        </text>\n        <br />\n        <text>\n          <i>(For a Particular country, select a Country from below)</i>\n        </text>\n        <br />\n        <br />\n        <Cards data={data} country={country} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Cards, CountryPicker, Chart } from \"./Components\";\n// import { fetchData } from \"./api/\";\n// import styles from \"./App.module.css\";\n// import Footer from \"./Components/Footer/Footer\";\n// import image from \"./images/image.png\";\n\n// const App = () => {\n//   const [data, setData] = useState({});\n//   const [country, setCountry] = useState();\n\n//   const handleCountryChange = async (country) => {\n//     const data = await fetchData(country);\n//     setCountry(country);\n//     setData(data);\n//   };\n\n//   useEffect(() => {\n//     async function loadData() {\n//       const data = await fetchData();\n//       setData({ data });\n//     }\n//     loadData();\n//   }, []);\n\n//   console.log(data);\n\n//   return (\n//     <div className={styles.container}>\n//       <img className={styles.image} src={image} alt=\"COVID-19\" />\n//       <br />\n//       <text>\n//         <b>Global and Country Wise Cases of Corona Virus</b>\n//       </text>\n//       <br />\n//       <text>\n//         <i>(For a Particlar select a Country from below)</i>\n//       </text>\n//       <br />\n//       <br />\n//       <Cards data={data} country={country} />\n//       <CountryPicker handleCountryChange={handleCountryChange} />\n//       <Chart data={data} country={country} />\n//       <Footer />\n//     </div>\n//   );\n// };\n\n// export default App;\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\nReactDom.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}